#!/usr/bin/env bash
set -e

# Config variables.
http_address="127.0.0.1:48574"
generated_header="// Code generated by goprofiler. DO NOT EDIT."

log() {
	echo "$@" 1>&2
}

fatal() {
	log "$@"
	exit 1
}

create_profiler() {
	[[ -f ./profile.go ]] && {
		fatal "profile.go exists, exiting."
	}

	local go_files=( *.go )
	(( ${#go_files[@]} == 0 )) && {
		fatal "no .go files found."
	}

	# Try and parse the first header of a file.
	local package_name=
	for go_file in "${go_files[@]}"; {
		# Search using the idiomatic regex. Skip packages that don't follow said
		# idiomatic package name rules.
		[[ "$(< "$go_file")" =~ ^package\ ([a-z]+) ]] && {
			package_name="${BASH_REMATCH[1]}"
			break
		}
	}

	[[ "$package_name" == "" ]] && {
		fatal "package name not found from the go files."
	}


	cat <<EOF > ./profile.go
$generated_header

package $package_name

import (
	"net/http"
	_ "net/http/pprof"
)

func init() {
	go func() {
		println("Serving HTTP at $http_address for profiler at /debug/pprof")
		panic(http.ListenAndServe("$http_address", nil))
	}()
}
EOF

	log "Added an HTTP listener for path $http_address/debug/pprof."
}

delete_profiler() {
	[[ ! -f ./profile.go ]] && {
		fatal "profile.go does not exist, exiting."
	}

	[[ "$(< ./profile.go)" != "$generated_header"* ]] && {
		fatal "profile.go is not auto-generated, exiting."
	}

	rm ./profile.go
}

main() {
	case $1 in
	"")
		create_profiler
		;;
	h|help)
		echo "$(basename $0) [""|h|d]"
		;;
	d|delete)
		delete_profiler
		;;
	*)
		fatal "Unknown command $1."
	esac
}

main "$@"
